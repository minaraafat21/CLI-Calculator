# .pre-commit-config.yaml
repos:
  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks  # This line tells pre-commit to fetch hooks from the central repository maintained by the pre-commit team
    rev: v4.4.0 # It fixes the version of the hooks to v4.4.0 – ensuring that everyone on the project uses the same hook behavior regardless of future changes
    hooks:  # Under this list, each hook has an ID that corresponds to a script that checks or fixes a particular issue
      - id: trailing-whitespace # Removes any extra whitespace at the end of lines
      - id: end-of-file-fixer # Ensures that each file ends with a newline
      - id: check-yaml  # Validates YAML files for correct syntax
      - id: check-added-large-files # Prevents accidentally committing very large files
      - id: check-merge-conflict  # Detects leftover merge conflict markers
      - id: check-case-conflict # Checks for file name conflicts due to case-sensitivity issues
      - id: mixed-line-ending # Fixes inconsistencies in line endings (e.g., CRLF vs. LF)

  # Python formatting and linting
  - repo: https://github.com/psf/black  # Points to the Black formatter repository
    rev: 23.3.0 # Uses version 23.3.0 of Black
    hooks:
      - id: black # Activates the Black hook
        language_version: python3 # Ensures that Black runs using Python 3
        args: [--line-length=88]  # Configures Black to wrap lines at 88 characters

  - repo: https://github.com/pycqa/isort  # Fetches the isort tool
    rev: 5.12.0 # Uses version 5.12.0
    hooks:
      - id: isort # Runs the isort hook
        args: [--profile=black] # Makes isort format imports in a style that complements Black

  - repo: https://github.com/pycqa/flake8 # Uses the flake8 linting tool
    rev: 6.0.0  # Specifies version 6.0.0
    hooks:
      - id: flake8  # Activates flake8
        args: [--max-line-length=88, --extend-ignore=E203, --ignore=W503] # sets the maximum line length in accordance with Black, tells flake8 to ignore specific warnings/errors that might conflict with Black’s formatting
        additional_dependencies: [flake8-docstrings, flake8-bugbear]  # Checks if functions and classes are properly documented, Adds extra warnings to catch common bugs and code smells

  - repo: https://github.com/pre-commit/mirrors-mypy  # Obtains mypy for static type checking
    rev: v1.3.0 # Uses version v1.3.0
    hooks:
      - id: mypy  # Enables the mypy hook
        args: [--ignore-missing-imports]  # Tells mypy to not fail when some type stubs are missing

  # C/C++ formatting
  - repo: https://github.com/pre-commit/mirrors-clang-format  # Points to a mirrored version of clang-format, which formats C/C++ code
    rev: v16.0.4  # Uses version 16.0.4
    hooks:
      - id: clang-format  # Activates the clang-format hook
        files: \.(c|h|cpp|hpp)$ # Restricts the hook to only run on files with C/C++ source and header file extensions
        args: [--style=Google]  # Tells clang-format to format the code according to the Google C++ style guidelines

  # Security checks
  - repo: https://github.com/PyCQA/bandit # Links to Bandit, a security analyzer for Python code
    rev: 1.7.5  # Specifies version 1.7.5
    hooks:
      - id: bandit  # Runs Bandit to search for common security issues
        args: [-r, src/python/] # The -r flag tells Bandit to recursively scan the src/python/ directory
        exclude: tests/ # Skips scanning the tests/ directory, which may not need the same degree of security scrutiny

  # Documentation
  - repo: https://github.com/igorshubovych/markdownlint-cli # Points to the markdownlint CLI tool, which checks Markdown file formatting
    rev: v0.35.0  # Uses version 0.35.0
    hooks:
      - id: markdownlint  # Activates the Markdown linting
        args: [--fix] # Instructs the tool to automatically fix issues where possible

  # Commit message formatting
  - repo: https://github.com/compilerla/conventional-pre-commit # Connects to a tool enforcing conventional commit message standards
    rev: v2.3.0 # Uses version v2.3.0
    hooks:
      - id: conventional-pre-commit # Runs the hook that checks your commit messages
        stages: [commit-msg]  # Specifies that this hook should run during the commit message stage of the commit process
        args: [optional-scope]  # Configures the expected commit message format to allow an optional scope (a contextual detail usually enclosed in parentheses after the commit type)

# Additional configuration
ci: # This key groups settings that control how pre-commit behaves in a CI (Continuous Integration) context
  # A multiline string (indicated by the pipe |) that defines the commit message template used when hooks auto-fix issues
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true # Indicates that if fixes are automatically applied by hooks, the changes should be committed and submitted as a pull request
  autoupdate_branch: '' # An empty string here suggests that no special branch is reserved for automatic updates of hook versions
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'  # This is the commit message used when the pre-commit CI automatically updates the hook versions
  autoupdate_schedule: weekly # Sets the schedule for checking and applying updates to the hooks. In this case, it happens every week
  skip: []  # An empty list means that no repositories are excluded from the CI process for auto-fixing or updating
  submodules: false # Indicates that pre-commit should not try to process Git submodules. This keeps CI focused on the main repository
